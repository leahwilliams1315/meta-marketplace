datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ARTISAN
  HOST
}

model User {
  id              String        @id
  slug            String?       @unique
  stripeAccountId String?
  role            UserRole      @default(CUSTOMER)
  city            String? // For location-based filtering
  marketplaces    Marketplace[] @relation("MarketplaceOwners")
  memberOf        Marketplace[] @relation("MarketplaceMembers")
  products        Product[]
  purchaseRequests PurchaseRequest[] @relation("BuyerRequests")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Marketplace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  city        String? // If you want location-based searches on the marketplace
  type        String? // e.g., "Pottery", "Jewelry", etc. for future
  owners      User[]    @relation("MarketplaceOwners")
  members     User[]    @relation("MarketplaceMembers")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  prices Price[]
}

enum PaymentStyle {
  INSTANT // Immediate purchase
  REQUEST // Requires merchant approval
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String
  images          Json        @default("[]")
  stripeProductId String? // Stripe product identifier
  totalQuantity   Int         @default(0) // Total available inventory
  marketplace     Marketplace @relation(fields: [marketplaceId], references: [id])
  marketplaceId   String
  seller          User        @relation(fields: [sellerId], references: [id])
  sellerId        String
  prices          Price[] // All prices associated with this product
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Price {
  id                String       @id @default(cuid())
  stripePriceId     String // The Stripe Price ID
  unitAmount        Int // Amount in cents
  currency          String // e.g., "usd"
  isDefault         Boolean      @default(false) // If true, this is the default price
  paymentStyle      PaymentStyle @default(INSTANT)
  allocatedQuantity Int          @default(0) // Quantity allocated for this price

  // Optional marketplace association. If null, this is the default price.
  marketplace   Marketplace? @relation(fields: [marketplaceId], references: [id])
  marketplaceId String?

  // Required product association
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PurchaseRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model PurchaseRequest {
  id          String    @id @default(cuid())
  buyer       User      @relation("BuyerRequests", fields: [buyerId], references: [id])
  buyerId     String
  items       Json      // Stored as JSON array of cart items
  status      PurchaseRequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
